-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_21_ap_vld : IN STD_LOGIC;
    input_21 : IN STD_LOGIC_VECTOR (191 downto 0);
    layer20_out_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer20_out_0_ap_vld : OUT STD_LOGIC;
    layer20_out_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer20_out_1_ap_vld : OUT STD_LOGIC;
    layer20_out_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer20_out_2_ap_vld : OUT STD_LOGIC;
    layer20_out_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer20_out_3_ap_vld : OUT STD_LOGIC;
    layer20_out_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer20_out_4_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_myproject,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.338000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=333,HLS_SYN_LUT=1460,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv192_lc_2 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv192_lc_3 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv192_lc_4 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv192_lc_5 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv192_lc_6 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv192_lc_7 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv192_lc_8 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100011";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv192_lc_9 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv192_lc_10 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010010010";
    constant ap_const_lv192_lc_11 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110010";
    constant ap_const_lv192_lc_12 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110001";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv192_lc_13 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal input_21_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal input_21_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal input_21_in_sig : STD_LOGIC_VECTOR (191 downto 0);
    signal input_21_ap_vld_preg : STD_LOGIC := '0';
    signal input_21_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln30_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_reg_927 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln31_fu_334_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln31_reg_932 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer2_out_10_fu_362_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_out_10_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_418_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_reg_947 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_reg_952 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln37_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_reg_957 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln38_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln38_reg_962 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln41_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_reg_967 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_reg_972 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln44_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln45_reg_982 : STD_LOGIC_VECTOR (7 downto 0);
    signal layer3_out_reg_987 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer3_out_1_reg_992 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer3_out_2_reg_997 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer3_out_3_reg_1002 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal layer8_out_reg_1007 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer13_out_reg_1012 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer13_out_1_reg_1017 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_ready : STD_LOGIC;
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_0_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_1_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_4_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_5_val : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_6_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_7_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_8_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_11_val : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_12_val : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_14_val : STD_LOGIC_VECTOR (9 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_15_val : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_2 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_3 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_ready : STD_LOGIC;
    signal call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_ap_ready : STD_LOGIC;
    signal layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_6_val : STD_LOGIC_VECTOR (7 downto 0);
    signal layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_12_val : STD_LOGIC_VECTOR (7 downto 0);
    signal layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_54_val : STD_LOGIC_VECTOR (6 downto 0);
    signal layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261_ap_ready : STD_LOGIC;
    signal layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_ready : STD_LOGIC;
    signal call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_ready : STD_LOGIC;
    signal call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_ready : STD_LOGIC;
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_12_val : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_27_val : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_ignoreCallOp65 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp70 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp81 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp82 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp83 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp100 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp106 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_1_fu_284_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_302_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_312_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_fu_330_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_fu_340_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln32_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_396_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_fu_414_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_424_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_fu_442_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_fu_452_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_fu_470_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_480_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_fu_498_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_fu_508_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln41_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln8_fu_536_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_fu_554_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_735_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_754_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_773_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_808_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_853_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_863_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_876_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_886_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln200_fu_899_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_908_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (9 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_8_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_11_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_12_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_14_val : IN STD_LOGIC_VECTOR (9 downto 0);
        data_15_val : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_6_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_12_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_41_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_54_val : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_6_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_12_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_41_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_54_val : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_5_val : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_5_val : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_12_val : IN STD_LOGIC_VECTOR (8 downto 0);
        data_27_val : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component myproject_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_12_val : IN STD_LOGIC_VECTOR (7 downto 0);
        data_27_val : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;



begin
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229 : component myproject_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s
    port map (
        ap_ready => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_ready,
        data_0_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_0_val,
        data_1_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_1_val,
        data_2_val => layer2_out_10_reg_937,
        data_4_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_4_val,
        data_5_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_5_val,
        data_6_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_6_val,
        data_7_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_7_val,
        data_8_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_8_val,
        data_11_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_11_val,
        data_12_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_12_val,
        data_14_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_14_val,
        data_15_val => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_15_val,
        ap_return_0 => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_0,
        ap_return_1 => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_1,
        ap_return_2 => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_2,
        ap_return_3 => call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_3,
        ap_rst => ap_rst);

    call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245 : component myproject_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s
    port map (
        ap_ready => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_ready,
        data_6_val => layer3_out_reg_987,
        data_12_val => layer3_out_1_reg_992,
        data_41_val => layer3_out_2_reg_997,
        data_54_val => layer3_out_3_reg_1002,
        ap_return_0 => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_0,
        ap_return_1 => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_1,
        ap_return_2 => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_2,
        ap_return_3 => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_3,
        ap_rst => ap_rst);

    layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253 : component myproject_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s
    port map (
        ap_ready => layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_ap_ready,
        data_6_val => layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_6_val,
        data_12_val => layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_12_val,
        data_41_val => call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_2,
        data_54_val => layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_54_val,
        ap_return => layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_ap_return,
        ap_rst => ap_rst);

    layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261 : component myproject_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s
    port map (
        ap_ready => layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261_ap_ready,
        data_5_val => layer8_out_reg_1007,
        ap_return => layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261_ap_return,
        ap_rst => ap_rst);

    call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266 : component myproject_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s
    port map (
        ap_ready => call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_ready,
        data_5_val => layer11_out_relu_ap_fixed_9_8_5_3_0_ap_ufixed_8_8_5_3_0_ReLU_config11_s_fu_261_ap_return,
        ap_return_0 => call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_0,
        ap_return_1 => call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_1,
        ap_rst => ap_rst);

    call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272 : component myproject_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s
    port map (
        ap_ready => call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_ready,
        data_12_val => layer13_out_reg_1012,
        data_27_val => layer13_out_1_reg_1017,
        ap_return_0 => call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_0,
        ap_return_1 => call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_1,
        ap_rst => ap_rst);

    call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278 : component myproject_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s
    port map (
        ap_ready => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_ready,
        data_12_val => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_12_val,
        data_27_val => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_27_val,
        ap_return_0 => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_0,
        ap_return_1 => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_1,
        ap_return_2 => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_2,
        ap_return_3 => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_3,
        ap_return_4 => call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_4,
        ap_rst => ap_rst);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    input_21_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_21_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    input_21_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_21_ap_vld = ap_const_logic_1))) then 
                    input_21_ap_vld_preg <= input_21_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_21_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_21_ap_vld = ap_const_logic_1))) then 
                    input_21_preg <= input_21;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_reg_927 <= add_ln30_fu_306_p2;
                add_ln31_reg_932 <= add_ln31_fu_334_p2;
                add_ln34_reg_942 <= add_ln34_fu_390_p2;
                add_ln35_reg_947 <= add_ln35_fu_418_p2;
                add_ln36_reg_952 <= add_ln36_fu_446_p2;
                add_ln37_reg_957 <= add_ln37_fu_474_p2;
                add_ln38_reg_962 <= add_ln38_fu_502_p2;
                add_ln41_reg_967 <= add_ln41_fu_530_p2;
                add_ln42_reg_972 <= add_ln42_fu_558_p2;
                add_ln45_reg_982 <= add_ln45_fu_608_p2;
                layer2_out_10_reg_937 <= layer2_out_10_fu_362_p2;
                layer3_out_1_reg_992 <= call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_1;
                layer3_out_2_reg_997 <= call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_2;
                layer3_out_3_reg_1002 <= call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_3;
                layer3_out_reg_987 <= call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_ap_return_0;
                xor_ln44_reg_977 <= xor_ln44_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                layer13_out_1_reg_1017 <= call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_1;
                layer13_out_reg_1012 <= call_ret_dense_latency_ap_ufixed_8_8_5_3_0_ap_fixed_9_7_5_3_0_config13_s_fu_266_ap_return_0;
                layer8_out_reg_1007 <= layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln30_fu_306_p2 <= std_logic_vector(unsigned(trunc_ln30_1_fu_284_p4) + unsigned(zext_ln30_fu_302_p1));
    add_ln31_fu_334_p2 <= std_logic_vector(unsigned(trunc_ln_fu_312_p4) + unsigned(zext_ln31_fu_330_p1));
    add_ln34_fu_390_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_368_p4) + unsigned(zext_ln34_fu_386_p1));
    add_ln35_fu_418_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_396_p4) + unsigned(zext_ln35_fu_414_p1));
    add_ln36_fu_446_p2 <= std_logic_vector(unsigned(trunc_ln4_fu_424_p4) + unsigned(zext_ln36_fu_442_p1));
    add_ln37_fu_474_p2 <= std_logic_vector(unsigned(trunc_ln5_fu_452_p4) + unsigned(zext_ln37_fu_470_p1));
    add_ln38_fu_502_p2 <= std_logic_vector(unsigned(trunc_ln6_fu_480_p4) + unsigned(zext_ln38_fu_498_p1));
    add_ln41_fu_530_p2 <= std_logic_vector(unsigned(trunc_ln7_fu_508_p4) + unsigned(zext_ln41_fu_526_p1));
    add_ln42_fu_558_p2 <= std_logic_vector(unsigned(trunc_ln8_fu_536_p4) + unsigned(zext_ln42_fu_554_p1));
    add_ln45_fu_608_p2 <= std_logic_vector(unsigned(trunc_ln9_fu_586_p4) + unsigned(zext_ln45_fu_604_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;

        ap_block_pp0_stage0_ignoreCallOp100 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp106 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp70 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp83 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_21_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (input_21_ap_vld_in_sig = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_0_val <= (add_ln30_reg_927 & ap_const_lv3_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_11_val <= (add_ln41_reg_967 & ap_const_lv3_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_12_val <= (add_ln42_reg_972 & ap_const_lv2_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_14_val <= (xor_ln44_reg_977 & ap_const_lv9_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_15_val <= (add_ln45_reg_982 & ap_const_lv1_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_1_val <= (add_ln31_reg_932 & ap_const_lv3_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_4_val <= (add_ln34_reg_942 & ap_const_lv1_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_5_val <= (add_ln35_reg_947 & ap_const_lv4_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_6_val <= (add_ln36_reg_952 & ap_const_lv3_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_7_val <= (add_ln37_reg_957 & ap_const_lv4_0);
    call_ret1_dense_latency_ap_fixed_11_6_5_3_0_ap_fixed_9_7_5_3_0_config3_s_fu_229_data_8_val <= (add_ln38_reg_962 & ap_const_lv3_0);
    call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_12_val <= (tmp_13_fu_808_p4 & ap_const_lv1_0);
    call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_data_27_val <= call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_1(4 - 1 downto 0);

    input_21_ap_vld_in_sig_assign_proc : process(input_21_ap_vld, input_21_ap_vld_preg)
    begin
        if ((input_21_ap_vld = ap_const_logic_1)) then 
            input_21_ap_vld_in_sig <= input_21_ap_vld;
        else 
            input_21_ap_vld_in_sig <= input_21_ap_vld_preg;
        end if; 
    end process;


    input_21_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, input_21_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_21_blk_n <= input_21_ap_vld;
        else 
            input_21_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_21_in_sig_assign_proc : process(input_21_ap_vld, input_21, input_21_preg)
    begin
        if ((input_21_ap_vld = ap_const_logic_1)) then 
            input_21_in_sig <= input_21;
        else 
            input_21_in_sig <= input_21_preg;
        end if; 
    end process;

        layer20_out_0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_863_p3),12));


    layer20_out_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer20_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer20_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        layer20_out_1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_886_p3),12));


    layer20_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer20_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer20_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        layer20_out_2 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln200_fu_899_p1),12));


    layer20_out_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer20_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer20_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer20_out_3 <= (tmp_16_fu_908_p4 & ap_const_lv1_0);

    layer20_out_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer20_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer20_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer20_out_4 <= call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_4;

    layer20_out_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer20_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer20_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_10_fu_362_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_340_p4) + unsigned(zext_ln32_fu_358_p1));
    layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_12_val <= (tmp_11_fu_754_p4 & ap_const_lv2_0);
    layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_54_val <= (tmp_12_fu_773_p4 & ap_const_lv2_0);
    layer8_out_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_9_8_5_3_0_config8_s_fu_253_data_6_val <= (tmp_s_fu_735_p4 & ap_const_lv1_0);
    shl_ln1_fu_886_p3 <= (tmp_15_fu_876_p4 & ap_const_lv1_0);
    shl_ln_fu_863_p3 <= (tmp_14_fu_853_p4 & ap_const_lv1_0);
    tmp_10_fu_564_p3 <= input_21_in_sig(178 downto 178);
    tmp_11_fu_754_p4 <= call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_1(7 downto 2);
    tmp_12_fu_773_p4 <= call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_3(6 downto 2);
    tmp_13_fu_808_p4 <= call_ret4_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config16_s_fu_272_ap_return_0(7 downto 1);
    tmp_14_fu_853_p4 <= call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_0(10 downto 1);
    tmp_15_fu_876_p4 <= call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_1(8 downto 1);
    tmp_16_fu_908_p4 <= call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_3(11 downto 1);
    tmp_18_fu_572_p3 <= input_21_in_sig(177 downto 177);
    tmp_19_fu_596_p3 <= input_21_in_sig(181 downto 181);
    tmp_1_fu_322_p3 <= input_21_in_sig(15 downto 15);
    tmp_2_fu_350_p3 <= input_21_in_sig(24 downto 24);
    tmp_3_fu_378_p3 <= input_21_in_sig(49 downto 49);
    tmp_4_fu_406_p3 <= input_21_in_sig(64 downto 64);
    tmp_5_fu_434_p3 <= input_21_in_sig(75 downto 75);
    tmp_6_fu_462_p3 <= input_21_in_sig(88 downto 88);
    tmp_7_fu_490_p3 <= input_21_in_sig(99 downto 99);
    tmp_8_fu_518_p3 <= input_21_in_sig(135 downto 135);
    tmp_9_fu_546_p3 <= input_21_in_sig(146 downto 146);
    tmp_fu_294_p3 <= input_21_in_sig(3 downto 3);
    tmp_s_fu_735_p4 <= call_ret2_relu_ap_fixed_9_7_5_3_0_ap_ufixed_8_6_5_3_0_ReLU_config6_s_fu_245_ap_return_0(7 downto 1);
    trunc_ln1_fu_340_p4 <= input_21_in_sig(33 downto 25);
    trunc_ln200_fu_899_p1 <= call_ret5_dense_latency_ap_ufixed_8_6_5_3_0_ap_fixed_12_6_5_3_0_config18_s_fu_278_ap_return_2(11 - 1 downto 0);
    trunc_ln2_fu_368_p4 <= input_21_in_sig(57 downto 50);
    trunc_ln30_1_fu_284_p4 <= input_21_in_sig(9 downto 4);
    trunc_ln3_fu_396_p4 <= input_21_in_sig(70 downto 65);
    trunc_ln4_fu_424_p4 <= input_21_in_sig(81 downto 76);
    trunc_ln5_fu_452_p4 <= input_21_in_sig(93 downto 89);
    trunc_ln6_fu_480_p4 <= input_21_in_sig(105 downto 100);
    trunc_ln7_fu_508_p4 <= input_21_in_sig(140 downto 136);
    trunc_ln8_fu_536_p4 <= input_21_in_sig(152 downto 147);
    trunc_ln9_fu_586_p4 <= input_21_in_sig(189 downto 182);
    trunc_ln_fu_312_p4 <= input_21_in_sig(21 downto 16);
    xor_ln44_fu_580_p2 <= (tmp_18_fu_572_p3 xor tmp_10_fu_564_p3);
    zext_ln30_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_294_p3),6));
    zext_ln31_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_322_p3),6));
    zext_ln32_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_350_p3),9));
    zext_ln34_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_378_p3),8));
    zext_ln35_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_406_p3),6));
    zext_ln36_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_434_p3),6));
    zext_ln37_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_462_p3),5));
    zext_ln38_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_490_p3),6));
    zext_ln41_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_518_p3),5));
    zext_ln42_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_546_p3),6));
    zext_ln45_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_596_p3),8));
end behav;
